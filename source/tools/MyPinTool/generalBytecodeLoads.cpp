#define PIN_DEPRECATED_WARNINGS 0
#include <stdio.h>
#include <map>
#include <iostream>
#include <fstream>
#include <fcntl.h>
#include <vector>
#include <deque>
#include <set>
#include <unordered_map>
#include <inttypes.h>
#include <chrono>
#include <queue>
#include "pin.H"

using std::string;
using std::map;
using std::ofstream; 
using std::ios;

static const std::unordered_map<std::string, std::string> regMap = {
    // RAX register family
    {"rax", "rax"}, {"eax", "rax"}, {"ax", "rax"}, {"al", "rax"}, {"ah", "rax"},
    // RBX register family
    {"rbx", "rbx"}, {"ebx", "rbx"}, {"bx", "rbx"}, {"bl", "rbx"}, {"bh", "rbx"},
    // RCX register family
    {"rcx", "rcx"}, {"ecx", "rcx"}, {"cx", "rcx"}, {"cl", "rcx"}, {"ch", "rcx"},
    // RDX register family
    {"rdx", "rdx"}, {"edx", "rdx"}, {"dx", "rdx"}, {"dl", "rdx"}, {"dh", "rdx"},
    // RSI register family
    {"rsi", "rsi"}, {"esi", "rsi"}, {"si", "rsi"}, {"sil", "rsi"},
    // RDI register family
    {"rdi", "rdi"}, {"edi", "rdi"}, {"di", "rdi"}, {"dil", "rdi"},
    // RBP register family
    {"rbp", "rbp"}, {"ebp", "rbp"}, {"bp", "rbp"}, {"bpl", "rbp"},
    // RSP register family
    {"rsp", "rsp"}, {"esp", "rsp"}, {"sp", "rsp"}, {"spl", "rsp"},
    // R8 register family
    {"r8", "r8"}, {"r8d", "r8"}, {"r8w", "r8"}, {"r8b", "r8"},
    // R9 register family
    {"r9", "r9"}, {"r9d", "r9"}, {"r9w", "r9"}, {"r9b", "r9"},
    // R10 register family
    {"r10", "r10"}, {"r10d", "r10"}, {"r10w", "r10"}, {"r10b", "r10"},
    // R11 register family
    {"r11", "r11"}, {"r11d", "r11"}, {"r11w", "r11"}, {"r11b", "r11"},
    // R12 register family
    {"r12", "r12"}, {"r12d", "r12"}, {"r12w", "r12"}, {"r12b", "r12"},
    // R13 register family
    {"r13", "r13"}, {"r13d", "r13"}, {"r13w", "r13"}, {"r13b", "r13"},
    // R14 register family
    {"r14", "r14"}, {"r14d", "r14"}, {"r14w", "r14"}, {"r14b", "r14"},
    // R15 register family
    {"r15", "r15"}, {"r15d", "r15"}, {"r15w", "r15"}, {"r15b", "r15"}
};

ofstream OutFile;

// Name of output file
KNOB <string> KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "first_tool.out", "output file");

// Addresses used for 
ADDRINT mainModuleBase = 0;
ADDRINT mainModuleHigh = 0;

// Callback for loaded images - to find the base and high of the program, and thus calculate offsets
VOID Image(IMG img, VOID* v) {
    if (IMG_IsMainExecutable(img)) {
        mainModuleBase = IMG_LowAddress(img);
        mainModuleHigh = IMG_HighAddress(img);
    }
}

// Generated by ChatGPT
bool AreRegistersOverlapping(const std::string& reg1, const std::string& reg2) {
    // Find the full 64-bit counterparts for each register
    auto it1 = regMap.find(reg1);
    auto it2 = regMap.find(reg2);

    // If both registers are found, check if they map to the same 64-bit register
    if (it1 != regMap.end() && it2 != regMap.end()) {
        return it1->second == it2->second;
    }

    // If one of the registers is not found, return false (you might want to handle this differently)
    return false;
}

struct REGS_STRINGS {
    string READ_REGS[3];
    string WRITE_REGS[3];
};

struct INS_WITH_REGS {
    ADDRINT INS_ADDR;
    string SOURCE_REGS[3];
    string DEST_REGS[3];
    bool memoryRead;
};


struct PossibleTableLoadIns {
    ADDRINT PC;
    ADDRINT LOADED_ADDR;
    string READ_REGS[3];
    string WRITE_REGS[3];
};

struct TableLoadIns {
    ADDRINT LOAD_ADDR;
    ADDRINT JMP_ADDR;
    string READ_REGS[3];
    string WRITE_REGS[3];
};
constexpr bool operator< ( TableLoadIns const& a, TableLoadIns const& b)
    { return std::make_pair(a.LOAD_ADDR, a.JMP_ADDR) < std::make_pair(b.LOAD_ADDR, b.JMP_ADDR); }

void copyRegs(PossibleTableLoadIns &tableLoad, REGS_STRINGS const* regs) {
    for (int i = 0; i < 3; i++) {
        tableLoad.READ_REGS[i] = regs->READ_REGS[i]; 
        tableLoad.WRITE_REGS[i] = regs->WRITE_REGS[i];
    } 
}

void copyRegs(TableLoadIns &tableLoad, PossibleTableLoadIns const* possibleTableLoad) {
    for (int i = 0; i < 3; i++) {
        tableLoad.READ_REGS[i] = possibleTableLoad->READ_REGS[i]; 
        tableLoad.WRITE_REGS[i] = possibleTableLoad->WRITE_REGS[i];
    } 
}  

std::map<TableLoadIns, INT> tableLoadInstructions;
std::set<ADDRINT> indirectJumps;

int tableLoadIndex = 0;
constexpr int SIZE_OF_POSSIBLETABLELOADS = 50;
std::vector<PossibleTableLoadIns> possibleTableLoadInsVector;
std::vector<INS_WITH_REGS> instructionBuffer;


VOID memoryLoad(ADDRINT PC, ADDRINT readAddr, UINT32 readSize, REGS_STRINGS* regs) {
    PossibleTableLoadIns loadIns;
    if (readSize != 8) return;
    UINT64 readValue;


    if (regs->READ_REGS[1] == "") return;
    // Safely read the memory content
    if (PIN_SafeCopy(&readValue, reinterpret_cast<void*>(readAddr), readSize) == readSize) {
        // Print the memory read value in hex
        loadIns.PC = PC - mainModuleBase;
        loadIns.LOADED_ADDR =  static_cast<ADDRINT>(readValue) - mainModuleBase;
        copyRegs(loadIns, regs);
        if (possibleTableLoadInsVector.size() < SIZE_OF_POSSIBLETABLELOADS) {
            possibleTableLoadInsVector.push_back(loadIns);
        } else {
            possibleTableLoadInsVector[tableLoadIndex] = loadIns;
        }
        tableLoadIndex++;
        if (tableLoadIndex == SIZE_OF_POSSIBLETABLELOADS) tableLoadIndex = 0;
    } else {
        std::cout << "Failed to read memory at address " << std::hex << readAddr << std::endl;
    }
}

VOID generalInstruction(ADDRINT PC, REGS_STRINGS* regs) {
    
}


VOID indirectJump(ADDRINT insAddress, ADDRINT targetAddr) {
    auto loadIns = std::find_if(possibleTableLoadInsVector.begin(), possibleTableLoadInsVector.end(),
                                [targetAddr] (const PossibleTableLoadIns possibleTableLoad) {
                                    return possibleTableLoad.LOADED_ADDR == targetAddr - mainModuleBase;
                                });

    if (loadIns != possibleTableLoadInsVector.end()) {
        TableLoadIns tableLoadIns;
        tableLoadIns.LOAD_ADDR = loadIns->PC;
        tableLoadIns.JMP_ADDR = insAddress - mainModuleBase;
        for (int i = 0; i < 3; i++) {
            tableLoadIns.READ_REGS[i] = loadIns->READ_REGS[i]; 
            tableLoadIns.WRITE_REGS[i] = loadIns->WRITE_REGS[i]; 
        } 
        tableLoadInstructions[tableLoadIns]++;
        possibleTableLoadInsVector.clear();
    }
    indirectJumps.insert(insAddress - mainModuleBase); 
}


VOID Instruction(INS ins, VOID* v) {
    // Ensure the instruction is from the main module
    if (INS_Address(ins) >= mainModuleBase && INS_Address(ins) <= mainModuleHigh) {          
        REGS_STRINGS* reg_strings = new REGS_STRINGS;
        if (INS_IsMemoryRead(ins)) {
            size_t numWriteRegs = INS_MaxNumWRegs(ins);
            string writeRegs[3];
            for (size_t i = 0; i < numWriteRegs; ++i) {
                reg_strings->WRITE_REGS[i] = REG_StringShort(INS_RegR(ins, i));
            }
            size_t numReadRegs = INS_MaxNumRRegs(ins);
            string readRegs[3];
            for (size_t i = 0; i < numReadRegs; ++i) {
                reg_strings->READ_REGS[i] = REG_StringShort(INS_RegR(ins, i));
            }
            INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR) memoryLoad,
                IARG_INST_PTR,
                IARG_MEMORYREAD_EA,
                IARG_UINT32, INS_MemoryReadSize(ins),
                IARG_PTR, reg_strings,
                IARG_PTR, &writeRegs,
                IARG_END
            );
        }
        else if (INS_IsIndirectBranchOrCall(ins)){
            if (!INS_IsCall(ins))INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)indirectJump, IARG_INST_PTR, IARG_BRANCH_TARGET_ADDR, IARG_END);
        }
    }
}


VOID Fini(INT32 code, VOID* v) {        
    std::cout << "Time to generate results!" << std::endl;
    OutFile.setf(ios::showbase);
    for (const auto &[tableLoadAddr, times]  : tableLoadInstructions) {
        OutFile << std::hex << "LoadAddr: " << tableLoadAddr.LOAD_ADDR << " JmpAddr: " << tableLoadAddr.JMP_ADDR << " Readregs: ";
        for (const string &readReg : tableLoadAddr.READ_REGS) {
            OutFile << readReg << " ";
        } 
        OutFile << " WriteRegs: ";
        for (const string &writeReg : tableLoadAddr.WRITE_REGS) {
            OutFile << writeReg << " ";
        } 
        OutFile << " Times: " << std::dec << times << "\n";
    }
    OutFile << "\n\n\n\n";
    for (ADDRINT indirectJump : indirectJumps) {
        OutFile << std::hex << "JmpInsAddr: " << indirectJump << "\n";
    }
    OutFile.close();
}

// Print Help Message
INT32 Usage() {
    std::cerr << "This tool is used to label memory loads which are connected to bytecode loads (for CPython 3.11)" << std::endl;
    std::cerr << std::endl << KNOB_BASE::StringKnobSummary() << std::endl;
    return -1;
}

int main(int argc, char* argv[]) {
    if (PIN_Init(argc, argv)) return Usage();
    
    OutFile.open(KnobOutputFile.Value().c_str());

    // Fix base adress to enable calculation of offset
    IMG_AddInstrumentFunction(Image, 0);

    std::printf("Starting PinTool! \n");
    INS_AddInstrumentFunction(Instruction, 0);
    PIN_AddFiniFunction(Fini, 0);
    PIN_StartProgram();

    return 0;
}